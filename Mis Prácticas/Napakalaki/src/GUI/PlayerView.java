/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import napakalaki.BadConsequence;
import napakalaki.Napakalaki;
import napakalaki.NumericBadConsequence;
import napakalaki.Player;
import napakalaki.Treasure;

/**
 *
 * @author fran
 */
public class PlayerView extends javax.swing.JPanel {

    // Variables
    private Player playerModel;
    private Napakalaki napakalakiModel;

    /**
     * Creates new form PlayerView
     */
    public PlayerView() {
        
        initComponents();
        
        //jPanelPlayerHiddenTreasures.setBackground(new Color(0,0,0,40));
        //jPanelPlayerVisibleTreasures.setBackground(new Color(0,0,0,40));
        jPanelVisible.setBorder(BorderFactory.createMatteBorder(5, 5, 5, 5, new Color(0,0,0,50)));
        jPanelHidden.setBorder(BorderFactory.createMatteBorder(5, 5, 5, 5, new Color(0,0,0,50)));
        
        jPanelInfo.setBackground(new Color(0,0,0, 50));
        jPanelBCP.setBackground(new Color(0,0,0, 50));
        
        // Se ponen los iconos a la aplicaci√≥n
        setIconButtonStealTreasure();
        setIconButtonMakeVisible();
        setIconButtonDiscardTreasures();
        setIconButtonDiscardAllTreasures();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelInfo = new javax.swing.JPanel();
        jLabelPlayerName = new javax.swing.JLabel();
        jLabelPlayerLevel = new javax.swing.JLabel();
        jLabelPlayerCanISteal = new javax.swing.JLabel();
        jLabelPlayerDead = new javax.swing.JLabel();
        jLabelPlayerEnemyName = new javax.swing.JLabel();
        jLabelPlayerCultist = new javax.swing.JLabel();
        jPanelBCP = new javax.swing.JPanel();
        pendingBadConsequenceViewPlayer = new GUI.PendingBadConsequenceView();
        jPanel2 = new javax.swing.JPanel();
        jPanelVisible = new javax.swing.JPanel();
        jLabelVisible = new javax.swing.JLabel();
        jPanelPlayerVisibleTreasures = new javax.swing.JPanel();
        jPanelHidden = new javax.swing.JPanel();
        jLabelHidden = new javax.swing.JLabel();
        jPanelPlayerHiddenTreasures = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButtonPlayerStealTreasure = new javax.swing.JButton();
        jButtonPlayerMakeVisible = new javax.swing.JButton();
        jButtonPlayerDiscardTreasures = new javax.swing.JButton();
        jButtonPlayerDiscardAllTreasures = new javax.swing.JButton();

        setOpaque(false);

        jPanelInfo.setMinimumSize(new java.awt.Dimension(348, 40));
        jPanelInfo.setPreferredSize(new java.awt.Dimension(348, 40));
        jPanelInfo.setLayout(new java.awt.GridLayout());

        jLabelPlayerName.setForeground(new java.awt.Color(254, 254, 254));
        jLabelPlayerName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelPlayerName.setText("Name");
        jLabelPlayerName.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabelPlayerName.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanelInfo.add(jLabelPlayerName);

        jLabelPlayerLevel.setForeground(new java.awt.Color(254, 254, 254));
        jLabelPlayerLevel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelPlayerLevel.setText("Level");
        jLabelPlayerLevel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabelPlayerLevel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanelInfo.add(jLabelPlayerLevel);

        jLabelPlayerCanISteal.setForeground(new java.awt.Color(254, 254, 254));
        jLabelPlayerCanISteal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelPlayerCanISteal.setText("CanISteal");
        jLabelPlayerCanISteal.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabelPlayerCanISteal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanelInfo.add(jLabelPlayerCanISteal);

        jLabelPlayerDead.setForeground(new java.awt.Color(254, 254, 254));
        jLabelPlayerDead.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelPlayerDead.setText("Dead");
        jLabelPlayerDead.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabelPlayerDead.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanelInfo.add(jLabelPlayerDead);

        jLabelPlayerEnemyName.setForeground(new java.awt.Color(254, 254, 254));
        jLabelPlayerEnemyName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelPlayerEnemyName.setText("EnemyName");
        jLabelPlayerEnemyName.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabelPlayerEnemyName.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanelInfo.add(jLabelPlayerEnemyName);

        jLabelPlayerCultist.setForeground(new java.awt.Color(254, 254, 254));
        jLabelPlayerCultist.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelPlayerCultist.setText("Cultist");
        jLabelPlayerCultist.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabelPlayerCultist.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanelInfo.add(jLabelPlayerCultist);

        jPanelBCP.setBackground(new java.awt.Color(1, 1, 1));
        jPanelBCP.setMinimumSize(new java.awt.Dimension(94, 35));
        jPanelBCP.setPreferredSize(new java.awt.Dimension(94, 35));

        pendingBadConsequenceViewPlayer.setForeground(new java.awt.Color(254, 254, 254));
        jPanelBCP.add(pendingBadConsequenceViewPlayer);

        jPanel2.setOpaque(false);
        jPanel2.setLayout(new java.awt.GridLayout(2, 0, 0, 5));

        jPanelVisible.setOpaque(false);
        jPanelVisible.setLayout(new java.awt.BorderLayout());

        jLabelVisible.setForeground(new java.awt.Color(254, 254, 254));
        jLabelVisible.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelVisible.setText("Tesoros visibles:");
        jPanelVisible.add(jLabelVisible, java.awt.BorderLayout.NORTH);

        jPanelPlayerVisibleTreasures.setBorder(null);
        jPanelPlayerVisibleTreasures.setOpaque(false);
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout();
        flowLayout1.setAlignOnBaseline(true);
        jPanelPlayerVisibleTreasures.setLayout(flowLayout1);
        jPanelVisible.add(jPanelPlayerVisibleTreasures, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanelVisible);

        jPanelHidden.setOpaque(false);
        jPanelHidden.setLayout(new java.awt.BorderLayout());

        jLabelHidden.setForeground(new java.awt.Color(254, 254, 254));
        jLabelHidden.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelHidden.setText("Tesoros ocultos:");
        jPanelHidden.add(jLabelHidden, java.awt.BorderLayout.NORTH);

        jPanelPlayerHiddenTreasures.setBorder(null);
        jPanelPlayerHiddenTreasures.setOpaque(false);
        java.awt.FlowLayout flowLayout2 = new java.awt.FlowLayout();
        flowLayout2.setAlignOnBaseline(true);
        jPanelPlayerHiddenTreasures.setLayout(flowLayout2);
        jPanelHidden.add(jPanelPlayerHiddenTreasures, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanelHidden);

        jPanel3.setOpaque(false);

        jButtonPlayerStealTreasure.setText("StealTreasure");
        jButtonPlayerStealTreasure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayerStealTreasureActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonPlayerStealTreasure);

        jButtonPlayerMakeVisible.setText("Make Visible");
        jButtonPlayerMakeVisible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayerMakeVisibleActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonPlayerMakeVisible);

        jButtonPlayerDiscardTreasures.setText("Discard Treasures");
        jButtonPlayerDiscardTreasures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayerDiscardTreasuresActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonPlayerDiscardTreasures);

        jButtonPlayerDiscardAllTreasures.setText("Discard All Treasures");
        jButtonPlayerDiscardAllTreasures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayerDiscardAllTreasuresActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonPlayerDiscardAllTreasures);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelInfo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelBCP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelBCP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPlayerMakeVisibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayerMakeVisibleActionPerformed
        
        // Se recopila informaci√≥n de la GUI
        ArrayList<Treasure> setHidden = getSelectedTreasures(jPanelPlayerHiddenTreasures);
        
        // Se env√≠a mensajes al modelo para desarrollar la acci√≥n
        napakalakiModel.makeTreasuresVisible(setHidden);
        
        // Se actualiza la vista
        setNapakalaki(napakalakiModel);
        setPlayer(playerModel);
        
    }//GEN-LAST:event_jButtonPlayerMakeVisibleActionPerformed

    private void jButtonPlayerStealTreasureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayerStealTreasureActionPerformed

        if(playerModel.canISteal()){

            // Se obtiene el jugador actual y roba un tesoro
            napakalakiModel.getCurrentPlayer().stealTreasure();
        
            // Se actualiza la vista
            setNapakalaki(napakalakiModel);
            setPlayer(playerModel);
            
        } else{
            
            JOptionPane.showMessageDialog(this,"No puedes robar m√°s a "+playerModel.getEnemy().getName(),
            "¬°Atenci√≥n!", JOptionPane.PLAIN_MESSAGE);
            
        }
                
    }//GEN-LAST:event_jButtonPlayerStealTreasureActionPerformed

    private void jButtonPlayerDiscardTreasuresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayerDiscardTreasuresActionPerformed
        
        // Se recogen los tesoros ocultos
        ArrayList<Treasure> treasures = getSelectedTreasures(jPanelPlayerHiddenTreasures);
        
        // Se borran los tesoros ocultos
        napakalakiModel.discardHiddenTreasures(treasures);
        
        // Se recogen los tesoros visibles
        treasures = getSelectedTreasures(jPanelPlayerVisibleTreasures);
        
        // Se env√≠a mensajes al modelo para desarrollar la acci√≥n
        napakalakiModel.discardVisibleTreasures(treasures);
        
        // Se actualiza la vista
        setNapakalaki(napakalakiModel);
        setPlayer(playerModel);
        
    }//GEN-LAST:event_jButtonPlayerDiscardTreasuresActionPerformed

    private void jButtonPlayerDiscardAllTreasuresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayerDiscardAllTreasuresActionPerformed
        
        // Se descartan todos los tesoros
        napakalakiModel.getCurrentPlayer().discardAllTreasures();
        
        // Se actualiza la vista
        setPlayer(playerModel);
        
    }//GEN-LAST:event_jButtonPlayerDiscardAllTreasuresActionPerformed

    // Setters
    public void setPlayer(Player p) {
        
        playerModel = p;

        jLabelPlayerName.setText("Nombre: "+p.getName());
        jLabelPlayerLevel.setText("Nivel: "+p.getLevels());
        
        if(p.isDead()){
            jLabelPlayerDead.setText("¬øEst√° muerto?: Si");
        }else{
            jLabelPlayerDead.setText("¬øEst√° muerto?: No");
        }
        
        if(p.canISteal()){
            jLabelPlayerCanISteal.setText("¬øPuede robar?: Si");
        }else{
            jLabelPlayerCanISteal.setText("¬øPuede robar?: No");
        }
        
        jLabelPlayerEnemyName.setText("Enemigo: "+p.getEnemy().getName());

        if(p.isCultist()) {
            jLabelPlayerCultist.setText("¬øEs sectario?: Si");
        } else {
            jLabelPlayerCultist.setText("¬øEs sectario?: No");
        }

        // A continuaci√≥n se actualizan sus tesoros
        this.fillTreasurePanel(jPanelPlayerVisibleTreasures, playerModel.getVisibleTreasures());
        this.fillTreasurePanel(jPanelPlayerHiddenTreasures, playerModel.getHiddenTreasures());

        pendingBadConsequenceViewPlayer.setPendingBadConsequence(p.getPendingBadConsequence());
        
        repaint();
        revalidate();

    }
    
    public Player getPlayer(){
        return playerModel;
    }

    public void setNapakalaki(Napakalaki napakalaki) {
        napakalakiModel = napakalaki;
    }

    // Utils
    private void fillTreasurePanel(JPanel aPanel, ArrayList<Treasure> aList) {

        // Se elimina la informaci√≥n antigua, si la hubiera
        aPanel.removeAll();

        // Se recorre la lista de tesoros construyendo y a√±adiendo sus vistas
        // al panel
        for (Treasure t : aList) {
            TreasureView aTreasureView = new TreasureView();
            aTreasureView.setTreasure(t);
            aTreasureView.setVisible(true);
            aPanel.add(aTreasureView);
        }

        // Se fuerza la actualizaci√≥n visual del panel
        aPanel.repaint();
        aPanel.revalidate();

    }

    private ArrayList<Treasure> getSelectedTreasures(JPanel aPanel) {
        
        // Se recorren los tesoros que contiene el panel,
        // almacenando en un vector aquellos que est√°n seleccionados.
        // Finalmente se devuelve dicho vector.
        ArrayList<Treasure> output = new ArrayList();
        
        TreasureView tv;
        
        for (Component c : aPanel.getComponents()) {
            
            tv = (TreasureView)c;
            
            if (tv.isSelected()) {
                output.add(tv.getTreasure());
            }
            
        }
        
        return output;
        
    }
    
    // Le establece un icono al boton StealTreasure
    private void setIconButtonStealTreasure(){
        
        jButtonPlayerStealTreasure.setText("");
        jButtonPlayerStealTreasure.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stealtreasure.png")));
        jButtonPlayerStealTreasure.setBorder(BorderFactory.createMatteBorder(0,0,0,0, new Color(0,0,0,0)));
        jButtonPlayerStealTreasure.setBackground(new Color(0,0,0,0));
        
    }
    
    // Le establece un icono al boton MakeVisible
    private void setIconButtonMakeVisible(){
        
        jButtonPlayerMakeVisible.setText("");
        jButtonPlayerMakeVisible.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/makevisible.png")));
        jButtonPlayerMakeVisible.setBorder(BorderFactory.createMatteBorder(0,0,0,0, new Color(0,0,0,0)));
        jButtonPlayerMakeVisible.setBackground(new Color(0,0,0,0));
        
    }
    
    // Le establece un icono al boton DiscardTreasures
    private void setIconButtonDiscardTreasures(){
        
        jButtonPlayerDiscardTreasures.setText("");
        jButtonPlayerDiscardTreasures.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/discardtreasures.png")));
        jButtonPlayerDiscardTreasures.setBorder(BorderFactory.createMatteBorder(0,0,0,0, new Color(0,0,0,0)));
        jButtonPlayerDiscardTreasures.setBackground(new Color(0,0,0,0));
        
    }
    
    // Le establece un icono al boton DiscardAllTreasures
    private void setIconButtonDiscardAllTreasures(){
        
        jButtonPlayerDiscardAllTreasures.setText("");
        jButtonPlayerDiscardAllTreasures.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/discardalltreasures.png")));
        jButtonPlayerDiscardAllTreasures.setBorder(BorderFactory.createMatteBorder(0,0,0,0, new Color(0,0,0,0)));
        jButtonPlayerDiscardAllTreasures.setBackground(new Color(0,0,0,0));
        
    }
    
    // Quita el texto al pedingBadConsequence
    public void setTextPBC(String text, String level){
        pendingBadConsequenceViewPlayer.jLabelBCPText.setText(text);
        pendingBadConsequenceViewPlayer.jLabelBCPLevel.setText(level);
    }
    
    // Quita el texto al pedingBadConsequence
    public void setTextInfoEmpty(){
        
        jLabelPlayerName.setText("");
        jLabelPlayerLevel.setText("");        
        jLabelPlayerDead.setText("");
        jLabelPlayerCanISteal.setText("");
        jLabelPlayerEnemyName.setText("");
        jLabelPlayerCultist.setText("");
      
    }
    
    // Deshabilita los botones de control del jugador en caso de ganar la partida
    public void disableButtons(){
        jButtonPlayerDiscardAllTreasures.setEnabled(false);
        jButtonPlayerDiscardTreasures.setEnabled(false);
        jButtonPlayerMakeVisible.setEnabled(false);
        jButtonPlayerStealTreasure.setEnabled(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonPlayerDiscardAllTreasures;
    private javax.swing.JButton jButtonPlayerDiscardTreasures;
    private javax.swing.JButton jButtonPlayerMakeVisible;
    private javax.swing.JButton jButtonPlayerStealTreasure;
    private javax.swing.JLabel jLabelHidden;
    private javax.swing.JLabel jLabelPlayerCanISteal;
    private javax.swing.JLabel jLabelPlayerCultist;
    private javax.swing.JLabel jLabelPlayerDead;
    private javax.swing.JLabel jLabelPlayerEnemyName;
    private javax.swing.JLabel jLabelPlayerLevel;
    private javax.swing.JLabel jLabelPlayerName;
    private javax.swing.JLabel jLabelVisible;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelBCP;
    private javax.swing.JPanel jPanelHidden;
    private javax.swing.JPanel jPanelInfo;
    protected javax.swing.JPanel jPanelPlayerHiddenTreasures;
    protected javax.swing.JPanel jPanelPlayerVisibleTreasures;
    private javax.swing.JPanel jPanelVisible;
    private GUI.PendingBadConsequenceView pendingBadConsequenceViewPlayer;
    // End of variables declaration//GEN-END:variables
}
